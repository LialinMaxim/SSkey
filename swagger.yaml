swagger: '2.0'
info:
  description: SSkey pasword manager
  version: 1.0.0
  title: SSkey pasword manager
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: glushko311@gmail.com
  license:
    name: 'Flask, Postgresql'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
# host: '192.168.99.100:5000'
host: '127.0.0.1:5000'
basePath: /
tags:
  - name: sskey
    description: Save your passwords and get its anywhere
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: password
    description: Save your passwords and get its anywhere
schemes:
  - http
paths:
  /smoke:
    get:
      tags:
        - smoke
      summary: Test is containers works
      operationId: smoke
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: OK
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/json
        - application/xml
      parameters:
        - in: query
          name: username
          required: true
          type: string
          description: The user login.
        - in: query
          name: email
          required: true
          type: string
          description: The user email.
        - in: query
          name: userpass
          required: true
          type: string
          description: The user password.
        - in: query
          name: first_name
          required: false
          type: string
          description: The user first name.
        - in: query
          name: last_name
          required: false
          type: string
          description: The user last name.
        - in: query
          name: phone
          required: false
          type: string
          description: The user phone.
      responses:
        default:
          description: successful operation
    get:
      tags:
        - user
      summary: Get all users
      description: Get all users for test add users in DATABASE
      operationId: getAllUsers
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      email:
        type: string
      userpass:
        type: string
      salt:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone:
        type: string
      reg_date:
        type: integer
        format: int64
      last_login_date:
        type: integer
        format: int64
    example:
      reg_date: 6
      userpass: password
      phone: phone
      last_name: last_name
      id: 0
      username: login
      last_login_date: 1
      first_name: first_name
      email: email
